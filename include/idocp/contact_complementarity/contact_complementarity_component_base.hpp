#ifndef IDOCP_CONTACT_COMPLEMENTARITY_COMPONENT_BASE_HPP_
#define IDOCP_CONTACT_COMPLEMENTARITY_COMPONENT_BASE_HPP_

#include <vector>

#include "Eigen/Core"

#include "idocp/robot/robot.hpp"
#include "idocp/ocp/split_solution.hpp"
#include "idocp/ocp/split_direction.hpp"
#include "idocp/constraints/constraint_component_data.hpp"
#include "idocp/ocp/kkt_residual.hpp"
#include "idocp/ocp/kkt_matrix.hpp"


namespace idocp {

///
/// @typedef ContactComplementarityComponentBase
/// @brief Base class for contact complementarity constraint components. 
/// @tparam Derived Derived class of contact complementarity constraint 
/// components.
///
template <typename Derived>
class ContactComplementarityComponentBase {
public:
  ///
  /// @brief Constructor. 
  /// @param[in] barrier Barrier parameter. Must be positive. Should be small.
  /// @param[in] fraction_to_boundary_rate Must be larger than 0 and smaller 
  /// than 1. Should be between 0.9 and 0.995.
  ///
  ContactComplementarityComponentBase(const double barrier, 
                                      const double fraction_to_boundary_rate);

  ///
  /// @brief Default constructor. 
  ///
  ContactComplementarityComponentBase();

  ///
  /// @brief Destructor. 
  ///
  virtual ~ContactComplementarityComponentBase();

  ///
  /// @brief Default copy constructor. 
  ///
  ContactComplementarityComponentBase(
      const ContactComplementarityComponentBase&) = default;

  ///
  /// @brief Default copy operator. 
  ///
  ContactComplementarityComponentBase& operator=(
      const ContactComplementarityComponentBase&) = default;

  ///
  /// @brief Default move constructor. 
  ///
  ContactComplementarityComponentBase(
      ContactComplementarityComponentBase&&) noexcept = default;

  ///
  /// @brief Default move assign operator. 
  ///
  ContactComplementarityComponentBase& operator=(
      ContactComplementarityComponentBase&&) noexcept = default;

  ///
  /// @brief Check whether the current solution s is feasible or not. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @return true if s is feasible. false if not.
  ///
  bool isFeasible(Robot& robot, ConstraintComponentData& data, 
                  const SplitSolution& s) const;

  ///
  /// @brief Set the slack and dual variables of each constraint components. 
  /// @param[in] robot Robot model.
  /// @param[out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  ///
  void setSlackAndDual(Robot& robot, ConstraintComponentData& data, 
                       const double dtau, const SplitSolution& s) const;

  ///
  /// @brief Augment the dual residual of the constraints to the KKT residual 
  /// with respect to the configuration, velocity, acceleration, and contact 
  /// forces.
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  /// @param[out] kkt_residual KKT residual.
  ///
  void augmentDualResidual(Robot& robot, ConstraintComponentData& data, 
                           const double dtau, const SplitSolution& s, 
                           KKTResidual& kkt_residual);

  ///
  /// @brief Consense slack and dual of the constraints and factorize condensed
  /// KKT Hessian and residual with respect to the configuration, velocity, 
  /// acceleration, and contact forces. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData(). residual and duality are also 
  /// computed.
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  /// @param[out] kkt_matrix The KKT matrix. The condensed Hessians are added  
  /// to this data.
  /// @param[out] kkt_residual KKT residual. The condensed residual are added 
  /// to this data.
  ///
  void condenseSlackAndDual(Robot& robot, ConstraintComponentData& data, 
                            const double dtau, const SplitSolution& s, 
                            KKTMatrix& kkt_matrix, KKTResidual& kkt_residual);

  ///
  /// @brief Compute directions of slack and dual.
  /// @param[in] robot Robot model.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  /// @param[in] d Split direction.
  ///
  void computeSlackAndDualDirection(Robot& robot, ConstraintComponentData& data, 
                                    const double dtau, const SplitSolution& s, 
                                    const SplitDirection& d) const;

  ///
  /// @brief Computes and return the L1-norm of the primal residual and duality
  /// of the constraints. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  /// @return L1 norm of the primal residual and duality of the constraints. 
  ///
  double residualL1Nrom(Robot& robot, ConstraintComponentData& data, 
                        const double dtau, const SplitSolution& s) const;

  ///
  /// @brief Computes and return the squared norm of the primal residual and 
  /// duality of the constraints. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dtau Time step.
  /// @param[in] s Split solution.
  /// @return Squared norm of the primal residual and duality of the constraints. 
  ///
  double squaredKKTErrorNorm(Robot& robot, ConstraintComponentData& data, 
                             const double dtau, const SplitSolution& s) const;

  ///
  /// @brief Returns the size of the constraints. 
  /// @return Size of the constraints. 
  /// 
  int dimc() const;

  ///
  /// @brief Compute and returns the maximum step size by applying 
  /// fraction-to-boundary-rule to the direction of slack.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @return Maximum step size of the slack.
  ///
  double maxSlackStepSize(const ConstraintComponentData& data, 
                          const std::vector<bool>& is_contact_active) const;

  ///
  /// @brief Compute and returns the maximum step size by applying 
  /// fraction-to-boundary-rule to the direction of dual.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @return Maximum step size of the dual.
  ///
  double maxDualStepSize(const ConstraintComponentData& data, 
                         const std::vector<bool>& is_contact_active) const;

  ///
  /// @brief Updates the slack with step_size.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @param[in] step_size Step size. 
  ///
  void updateSlack(ConstraintComponentData& data, 
                   const std::vector<bool>& is_contact_active, 
                   const double step_size) const;

  ///
  /// @brief Updates the dual with step_size.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @param[in] step_size Step size. 
  ///
  void updateDual(ConstraintComponentData& data, 
                  const std::vector<bool>& is_contact_active, 
                  const double step_size) const;

  ///
  /// @brief Computes and returns the value of the barrier function for slack 
  /// variables.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @return Value of the barrier function. 
  ///
  double costSlackBarrier(const ConstraintComponentData& data, 
                          const std::vector<bool>& is_contact_active) const;

  ///
  /// @brief Computes and returns the value of the barrier function for slack 
  /// variables with the step_size.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] is_contact_active Vector of bool representing each contact is 
  /// active or not.
  /// @param[in] step_size Step size. 
  /// @return Value of the barrier function. 
  ///
  double costSlackBarrier(const ConstraintComponentData& data, 
                          const std::vector<bool>& is_contact_active,
                          const double step_size) const;

  ///
  /// @brief Set the barrier parameter.
  /// @param[in] barrier Barrier parameter. Must be positive. Should be small.
  ///
  void setBarrier(const double barrier);

  ///
  /// @brief Set the fraction to boundary rate.
  /// @param[in] fraction_to_boundary_rate Must be larger than 0 and smaller 
  /// than 1. Should be between 0.9 and 0.995.
  ///
  void setFractionToBoundaryRate(const double fraction_to_boundary_rate);

protected:

  void setSlackAndDualPositive(Eigen::VectorXd& slack, 
                               Eigen::VectorXd& dual) const;

  double costSlackBarrier(const double slack) const;

  double costSlackBarrier(const double slack, const double dslack,
                          const double step_size) const;

  double computeDuality(const double slack, const double dual) const;

  double computeDualDirection(const double slack, const double dual, 
                              const double slack_direction, 
                              const double duality) const;

  double fractionToBoundary(const double var, const double dvar) const;

private:
  double barrier_, fraction_to_boundary_rate_;

};

} // namespace idocp

#include "idocp/contact_complementarity/contact_complementarity_component_base.hxx"

#endif // IDOCP_CONTACT_COMPLEMENTARITY_COMPONENT_BASE_HPP_ 